// Utilities
// *******************************************************************************
// stylelint-disable indentation

// Utilities

Dzdutilities: () !default;
// stylelint-disable-next-line scss/dollar-variable-default
Dzdutilities: map-merge(
  (
    // scss-docs-start utils-vertical-align
    'align':
      (
        property: vertical-align,
        class: align,
        values: baseline top middle bottom text-bottom text-top
      ),
    // scss-docs-end utils-vertical-align
    // scss-docs-start utils-overflow
    'overflow':
      (
        property: overflow,
        values: auto hidden visible scroll
      ),
    // scss-docs-end utils-overflow
    // scss-docs-start utils-display
    'display':
      (
        responsive: true,
        print: true,
        property: display,
        class: d,
        values: inline inline-block block grid table table-row table-cell flex inline-flex none
      ),
    // scss-docs-end utils-display
    // scss-docs-start utils-shadow
    'shadow':
      (
        property: box-shadow,
        class: shadow,
        values: (
          null: Dzdbox-shadow,
          sm: Dzdbox-shadow-sm,
          lg: Dzdbox-shadow-lg,
          none: none
        )
      ),
    // scss-docs-end utils-shadow
    // scss-docs-start utils-position
    'position':
      (
        property: position,
        values: static relative absolute fixed sticky
      ),
    'top': (
      property: top,
      values: Dzdposition-values
    ),
    'bottom': (
      property: bottom,
      values: Dzdposition-values
    ),
    // scss-docs-end utils-position
    // scss-docs-start utils-zindex
    'zindex':
      (
        property: z-index,
        class: zindex,
        values: (
          1: 1,
          2: 2,
          3: 3,
          4: 4,
          5: 5
        )
      ),
    // scss-docs-end utils-zindex
    // scss-docs-start utils-borders
    'border':
      (
        property: border,
        values: (
          null: Dzdborder-width solid Dzdborder-color,
          0: 0
        )
      ),
    'border-top': (
      property: border-top,
      values: (
        null: Dzdborder-width solid Dzdborder-color,
        0: 0
      )
    ),
    'border-bottom': (
      property: border-bottom,
      values: (
        null: Dzdborder-width solid Dzdborder-color,
        0: 0
      )
    ),
    'border-color': (
      property: border-color,
      class: border,
      values:
        map-merge(
          Dzdtheme-colors,
          (
            'white': Dzdwhite,
            'light': Dzdgray-100,
            // (C)
            'transparent': transparent // (C)
          )
        )
    ),
    'border-width': (
      property: border-width,
      class: border,
      values: Dzdborder-widths
    ),
    // scss-docs-end utils-borders
    // Sizing utilities
    // scss-docs-start utils-sizing
    'width':
      (
        property: width,
        class: w,
        values:
          map-merge(
            Dzdsizes-px,
            (
              25: 25%,
              50: 50%,
              75: 75%,
              100: 100%,
              auto: auto
            )
          )
      ),
    'max-width': (
      property: max-width,
      class: mw,
      values: (
        100: 100%
      )
    ),
    'viewport-width': (
      property: width,
      class: vw,
      values: (
        100: 100vw
      )
    ),
    'min-viewport-width': (
      property: min-width,
      class: min-vw,
      values: (
        100: 100vw
      )
    ),
    'height': (
      property: height,
      class: h,
      values:
        map-merge(
          Dzdsizes-px,
          (
            25: 25%,
            50: 50%,
            75: 75%,
            100: 100%,
            auto: auto
          )
        )
    ),
    'max-height': (
      property: max-height,
      class: mh,
      values: (
        100: 100%
      )
    ),
    'viewport-height': (
      property: height,
      class: vh,
      values: (
        100: 100vh
      )
    ),
    'min-viewport-height': (
      property: min-height,
      class: min-vh,
      values: (
        100: 100vh
      )
    ),
    // scss-docs-end utils-sizing
    // Flex utilities
    // scss-docs-start utils-flex
    'flex':
      (
        responsive: true,
        property: flex,
        values: (
          fill: 1 1 auto
        )
      ),
    'flex-direction': (
      responsive: true,
      property: flex-direction,
      class: flex,
      values: row column row-reverse column-reverse
    ),
    'flex-grow': (
      responsive: true,
      property: flex-grow,
      class: flex,
      values: (
        grow-0: 0,
        grow-1: 1
      )
    ),
    'flex-shrink': (
      responsive: true,
      property: flex-shrink,
      class: flex,
      values: (
        shrink-0: 0,
        shrink-1: 1
      )
    ),
    'flex-wrap': (
      responsive: true,
      property: flex-wrap,
      class: flex,
      values: wrap nowrap wrap-reverse
    ),
    'gap': (
      responsive: true,
      property: gap,
      class: gap,
      values: Dzdspacers
    ),
    'justify-content': (
      responsive: true,
      property: justify-content,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        evenly: space-evenly
      )
    ),
    'align-items': (
      responsive: true,
      property: align-items,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        baseline: baseline,
        stretch: stretch
      )
    ),
    'align-content': (
      responsive: true,
      property: align-content,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        stretch: stretch
      )
    ),
    'align-self': (
      responsive: true,
      property: align-self,
      values: (
        auto: auto,
        start: flex-start,
        end: flex-end,
        center: center,
        baseline: baseline,
        stretch: stretch
      )
    ),
    'order': (
      responsive: true,
      property: order,
      values: (
        first: -1,
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        last: 6
      )
    ),
    // scss-docs-end utils-flex
    // Margin utilities
    // scss-docs-start utils-spacing
    'margin':
      (
        responsive: true,
        property: margin,
        class: m,
        values:
          map-merge(
            Dzdspacers,
            (
              auto: auto
            )
          )
      ),
    'margin-x': (
      responsive: true,
      property: margin-right margin-left,
      class: mx,
      values:
        map-merge(
          Dzdspacers,
          (
            auto: auto
          )
        )
    ),
    'margin-y': (
      responsive: true,
      property: margin-top margin-bottom,
      class: my,
      values:
        map-merge(
          Dzdspacers,
          (
            auto: auto
          )
        )
    ),
    'margin-top': (
      responsive: true,
      property: margin-top,
      class: mt,
      values:
        map-merge(
          Dzdspacers,
          (
            auto: auto
          )
        )
    ),
    'margin-bottom': (
      responsive: true,
      property: margin-bottom,
      class: mb,
      values:
        map-merge(
          Dzdspacers,
          (
            auto: auto
          )
        )
    ),
    // Negative margin utilities
    'negative-margin':
      (
        responsive: true,
        property: margin,
        class: m,
        values: Dzdnegative-spacers
      ),
    'negative-margin-x': (
      responsive: true,
      property: margin-right margin-left,
      class: mx,
      values: Dzdnegative-spacers
    ),
    'negative-margin-y': (
      responsive: true,
      property: margin-top margin-bottom,
      class: my,
      values: Dzdnegative-spacers
    ),
    'negative-margin-top': (
      responsive: true,
      property: margin-top,
      class: mt,
      values: Dzdnegative-spacers
    ),
    'negative-margin-bottom': (
      responsive: true,
      property: margin-bottom,
      class: mb,
      values: Dzdnegative-spacers
    ),
    // Padding utilities
    'padding':
      (
        responsive: true,
        property: padding,
        class: p,
        values: Dzdspacers
      ),
    'padding-x': (
      responsive: true,
      property: padding-right padding-left,
      class: px,
      values: Dzdspacers
    ),
    'padding-y': (
      responsive: true,
      property: padding-top padding-bottom,
      class: py,
      values: Dzdspacers
    ),
    'padding-top': (
      responsive: true,
      property: padding-top,
      class: pt,
      values: Dzdspacers
    ),
    'padding-bottom': (
      responsive: true,
      property: padding-bottom,
      class: pb,
      values: Dzdspacers
    ),
    // scss-docs-end utils-spacing
    // Text
    // scss-docs-start utils-text
    'font-family':
      (
        property: font-family,
        class: font,
        values: (
          monospace: var(--#{Dzdvariable-prefix}font-monospace)
        )
      ),
    'font-size': (
      rfs: true,
      property: font-size,
      class: fs,
      values:
        map-merge(
          Dzdfont-sizes,
          (
            tiny: Dzdtiny-font-size,
            //(C)
            big: Dzdbig-font-size,
            //(C)
            large: Dzdlarge-font-size,
            //(C)
            xlarge: Dzdxlarge-font-size//(C)
          )
        )
    ),
    'font-style': (
      property: font-style,
      class: fst,
      values: italic normal
    ),
    'font-weight': (
      property: font-weight,
      class: fw,
      values: (
        light: Dzdfont-weight-light,
        lighter: Dzdfont-weight-lighter,
        normal: Dzdfont-weight-normal,
        bold: Dzdfont-weight-bold,
        semibold: Dzdfont-weight-semibold,
        //(C)
        bolder: Dzdfont-weight-bolder
      )
    ),
    'line-height': (
      property: line-height,
      class: lh,
      values: (
        1: 1,
        inherit: inherit,
        //(C)
        sm: Dzdline-height-sm,
        base: Dzdline-height-base,
        lg: Dzdline-height-lg
      )
    ),
    'text-decoration': (
      property: text-decoration,
      values: none underline line-through
    ),
    'text-transform': (
      property: text-transform,
      class: text,
      values: none lowercase uppercase capitalize
    ),
    'white-space': (
      property: white-space,
      class: text,
      values: (
        wrap: normal,
        nowrap: nowrap
      )
    ),
    'word-wrap': (
      property: word-wrap word-break,
      class: text,
      values: (
        break: break-word
      ),
      rtl: false
    ),
    // scss-docs-end utils-text
    // scss-docs-start utils-color
    'color':
      (
        property: color,
        class: text,
        local-vars: (
          'text-opacity': 1
        ),
        values:
          map-merge(
            Dzdutilities-text-colors,
            (
              'white': Dzdwhite,
              'body': Dzdbody-color,
              'muted': Dzdtext-muted,
              'black-50': rgba(Dzdblack, 0.5),
              // deprecated
              'white-50': rgba(Dzdwhite, 0.5),
              // deprecated
              'light': Dzdtext-light,
              // (c)
              'reset': inherit
            )
          )
      ),
    // scss-docs-end utils-color
    // scss-docs-start utils-bg-color
    'background-color':
      (
        property: background-color,
        class: bg,
        local-vars: (
          'bg-opacity': 1
        ),
        values:
          map-merge(
            Dzdutilities-bg-colors,
            (
              'body': Dzdbody-bg,
              'white': Dzdwhite,
              'transparent': transparent,
              'lighter': Dzdgray-50,
              //(C)
              'lightest': Dzdgray-25,
              //(C)
            )
          )
      ),
    // scss-docs-end utils-bg-color
    'gradient':
      (
        property: background-image,
        class: bg,
        values: (
          gradient: var(--#{Dzdvariable-prefix}gradient)
        )
      ),
    // scss-docs-start utils-interaction
    'user-select':
      (
        property: user-select,
        values: all auto none
      ),
    'pointer-events': (
      property: pointer-events,
      class: pe,
      values: none auto
    ),
    // scss-docs-end utils-interaction
    // scss-docs-start utils-border-radius
    'rounded':
      (
        property: border-radius,
        class: rounded,
        values: (
          null: Dzdborder-radius,
          0: 0,
          1: Dzdborder-radius-sm,
          2: Dzdborder-radius,
          3: Dzdborder-radius-lg,
          circle: 50%,
          pill: Dzdborder-radius-pill
        )
      ),
    'rounded-top': (
      property: border-top-left-radius border-top-right-radius,
      class: rounded-top,
      values: (
        null: Dzdborder-radius
      )
    ),
    'rounded-bottom': (
      property: border-bottom-right-radius border-bottom-left-radius,
      class: rounded-bottom,
      values: (
        null: Dzdborder-radius
      )
    ),
    // scss-docs-end utils-border-radius
    // scss-docs-start utils-visibility
    'visibility':
      (
        property: visibility,
        class: null,
        values: (
          visible: visible,
          invisible: hidden
        )
      ),
    // scss-docs-end utils-visibility
    // Custom Utilities
    // *******************************************************************************
    // scss-docs-start utils-flex-basis
    'cursor':
      (
        property: cursor,
        class: cursor,
        values: pointer move grab
      ),
    // scss-docs-end utils-flex-basis
  ),
  Dzdutilities
);

// Borders
// *******************************************************************************

// Bordered rows
.row-bordered {
  overflow: hidden;

  > .col,
  > [class^='col-'],
  > [class*=' col-'],
  > [class^='col '],
  > [class*=' col '],
  > [classDzd=' col'],
  > [class='col'] {
    position: relative;
    padding-top: 1px;

    &::before {
      content: '';
      position: absolute;
      right: 0;
      bottom: -1px;
      left: 0;
      display: block;
      height: 0;
      border-top: 1px solid Dzdbordered-row-border-color;
    }

    &::after {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      left: -1px;
      display: block;
      width: 0;
      border-left: 1px solid Dzdbordered-row-border-color;
    }
  }

  &.row-border-light {
    > .col,
    > [class^='col-'],
    > [class*=' col-'],
    > [class^='col '],
    > [class*=' col '],
    > [classDzd=' col'],
    > [class='col'] {
      &::before,
      &::after {
        border-color: Dzdgray-100;
      }
    }
  }
}

// Color
// *******************************************************************************

// Bg Label variant (Not able to include this in utils due to custom style)
@each Dzdcolor, Dzdvalue in Dzdtheme-colors {
  @if Dzdcolor != primary {
    @include bg-label-variant('.bg-label-#{Dzdcolor}', Dzdvalue);
    @include border-label-variant('.border-label-#{Dzdcolor}', Dzdvalue);
    @include border-light-variant('.border-light-#{Dzdcolor}', Dzdvalue);
  }
}

// ! FIX: .bg-dark & .bg-label-dark color in dark mode
@if Dzddark-style {
  @include border-label-variant('.border-label-dark', Dzdlight);
}

// Anchor hover/focus bg colors
a.bg-dark {
  &:hover,
  &:focus {
    background-color: Dzdgray-900 !important;
  }
}

a.bg-light {
  &:hover,
  &:focus {
    background-color: Dzdgray-200 !important;
  }
}

a.bg-lighter {
  &:hover,
  &:focus {
    background-color: Dzdgray-100 !important;
  }
}

a.bg-lightest {
  &:hover,
  &:focus {
    background-color: Dzdgray-50 !important;
  }
}

.text-muted[href] {
  &:hover,
  &:focus {
    color: Dzdtext-muted-hover !important;
  }
}

.text-light {
  color: Dzdtext-light !important;

  &[href] {
    &:hover,
    &:focus {
      color: Dzdtext-muted-hover !important;
    }
  }
}

.text-lighter {
  color: Dzdtext-lighter !important;

  &[href] {
    &:hover,
    &:focus {
      color: Dzdtext-muted-hover !important;
    }
  }
}

.text-lightest {
  color: Dzdtext-lightest !important;

  &[href] {
    &:hover,
    &:focus {
      color: Dzdtext-muted-hover !important;
    }
  }
}

// Invertible colors

.invert-text-white {
  color: if(not Dzddark-style, Dzdwhite, Dzdbody-bg) !important;
}
.invert-text-white[href]:hover {
  &:hover,
  &:focus {
    color: if(not Dzddark-style, Dzdwhite, Dzdbody-bg) !important;
  }
}

.invert-text-dark {
  color: if(not Dzddark-style, Dzdblack, Dzdwhite) !important;
}
.invert-text-dark[href]:hover {
  &:hover,
  &:focus {
    color: if(not Dzddark-style, Dzdblack, Dzdwhite) !important;
  }
}

.invert-bg-white {
  background-color: if(not Dzddark-style, Dzdwhite, Dzdbody-bg) !important;
}
a.invert-bg-white {
  &:hover,
  &:focus {
    background-color: if(not Dzddark-style, Dzdwhite, Dzdbody-bg) !important;
  }
}

.invert-bg-dark {
  background-color: if(not Dzddark-style, Dzdgray-900, Dzdwhite) !important;
}
a.invert-bg-dark {
  &:hover,
  &:focus {
    background-color: if(not Dzddark-style, Dzdgray-900, Dzdwhite) !important;
  }
}

.invert-border-dark {
  border-color: if(not Dzddark-style, Dzddark, Dzdwhite) !important;
}

.invert-border-white {
  border-color: if(not Dzddark-style, Dzdwhite, Dzdbody-bg) !important;
}

// Misc
// *******************************************************************************

// Layout containers
.container-p-x {
  padding-right: Dzdcontainer-padding-x-sm !important;
  padding-left: Dzdcontainer-padding-x-sm !important;

  @include media-breakpoint-up(lg) {
    padding-right: Dzdcontainer-padding-x !important;
    padding-left: Dzdcontainer-padding-x !important;
  }
}

.container-m-nx {
  margin-right: -Dzdcontainer-padding-x-sm !important;
  margin-left: -Dzdcontainer-padding-x-sm !important;

  @include media-breakpoint-up(lg) {
    margin-right: -Dzdcontainer-padding-x !important;
    margin-left: -Dzdcontainer-padding-x !important;
  }
}

.container-p-y {
  &:not([class^='pt-']):not([class*=' pt-']) {
    padding-top: Dzdcontainer-padding-y !important;
  }

  &:not([class^='pb-']):not([class*=' pb-']) {
    padding-bottom: Dzdcontainer-padding-y !important;
  }
}

.container-m-ny {
  &:not([class^='mt-']):not([class*=' mt-']) {
    margin-top: -Dzdcontainer-padding-y !important;
  }

  &:not([class^='mb-']):not([class*=' mb-']) {
    margin-bottom: -Dzdcontainer-padding-y !important;
  }
}

// Table cell
.cell-fit {
  width: 0.1%;
  white-space: nowrap;
}
